package cn.whu.wy.osgov.entity;

import cn.whu.wy.osgov.service.qax.bean.QaxVulnerability;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Objects;

/**
 * @author WangYong
 * Date 2022/08/09
 * Time 10:54
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class Vulnerability extends Entity {


    private String cve;
    private String cnnvd;
    // 唯一索引
    private String qaxOssId;
    // 索引
    private String name;
    private byte level;
    private byte utilizeDegree;
    private LocalDate exposedDate;
    private String description;
    private String solution;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Vulnerability that = (Vulnerability) o;
        return Objects.equals(qaxOssId, that.qaxOssId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(qaxOssId);
    }

    public static Vulnerability convertFrom(QaxVulnerability q) {
        return Vulnerability.builder()
                .cve(q.getCve())
                .cnnvd(q.getCnnvd())
                .qaxOssId(q.getQaxOssId())
                .name(q.getVulnerabilityName())
                .level((byte) (16 / q.getLevel()))
                .utilizeDegree((byte) (16 / q.getUtilizeDegree()))
                .exposedDate(LocalDate.parse(q.getReleaseDate(), DateTimeFormatter.ofPattern("yyyy-MM-dd")))
                .description(q.getVulnerabilityDescription().length() > 2000
                        ? q.getVulnerabilityDescription().substring(0, 2000)
                        : q.getVulnerabilityDescription())
                .solution(q.getSolution().length() > 2000
                        ? q.getSolution().substring(0, 2000)
                        : q.getSolution())
                .build();
    }
}
